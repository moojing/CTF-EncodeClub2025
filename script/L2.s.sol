// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "forge-std/Script.sol";

contract DeployL1 is Script {
    function run() external {
        bytes memory bytecode =
            hex"608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063209b472e1461002d575b5f5ffd5b61004061003b366004610647565b610056565b60405161004d919061066e565b60405180910390f35b61005e610628565b813580825260208084013590830181905260408085013590840152606080850135908401526080808501359084015260a0808501359084015260c0808501359084015260e080850135908401526101008085013590840152610120808501359084015210156100d557602081018051825190915281525b6060810151604082015111156100f75760608101805160408301805190925290525b60a0810151608082015111156101195760a08101805160808301805190925290525b60e081015160c0820151111561013b5760e08101805160c08301805190925290525b610120810151610100820151111561016157610120810180516101008301805190925290525b60408101518151111561017c57604081018051825190915281525b60608101516020820151111561019e5760608101805160208301805190925290525b60c0810151608082015111156101c05760c08101805160808301805190925290525b60e081015160a082015111156101e25760e08101805160a08301805190925290525b6080810151815111156101fd57608081018051825190915281525b60a08101516020820151111561021f5760a08101805160208301805190925290525b60c0810151604082015111156102415760c08101805160408301805190925290525b60e0810151606082015111156102635760e08101805160608301805190925290525b610100810151815111156102805761010081018051825190915281525b610120810151602082015111156102a4576101208101805160208301805190925290525b610100810151604082015111156102c8576101008101805160408301805190925290525b610120810151606082015111156102ec576101208101805160608301805190925290525b61010081015160808201511115610310576101008101805160808301805190925290525b61012081015160a08201511115610334576101208101805160a08301805190925290525b61010081015160c08201511115610358576101008101805160c08301805190925290525b61012081015160e0820151111561037c576101208101805160e08301805190925290525b60208101518151111561039757602081018051825190915281525b6060810151604082015111156103b95760608101805160408301805190925290525b60a0810151608082015111156103db5760a08101805160808301805190925290525b60e081015160c082015111156103fd5760e08101805160c08301805190925290525b610120810151610100820151111561042357610120810180516101008301805190925290525b6080810151602082015111156104455760808101805160208301805190925290525b60c0810151606082015111156104675760c08101805160608301805190925290525b6040810151602082015111156104895760408101805160208301805190925290525b6080810151606082015111156104ab5760808101805160608301805190925290525b60c081015160a082015111156104cd5760c08101805160a08301805190925290525b61010081015160e082015111156104f1576101008101805160e08301805190925290525b6080810151604082015111156105135760808101805160408301805190925290525b60e081015160a082015111156105355760e08101805160a08301805190925290525b6060810151604082015111156105575760608101805160408301805190925290525b60c081015160a082015111156105795760c08101805160a08301805190925290525b60808101516060820151111561059b5760808101805160608301805190925290525b60e081015160c082015111156105bd5760e08101805160c08301805190925290525b60a0810151606082015111156105df5760a08101805160608301805190925290525b60c0810151608082015111156106015760c08101805160808301805190925290525b60a0810151608082015111156106235760a08101805160808301805190925290525b919050565b604051806101400160405280600a906020820280368337509192915050565b5f6101408284031215610658575f5ffd5b8261014083011115610668575f5ffd5b50919050565b610140810181835f5b600a811015610696578151835260209283019290910190600101610677565b5050509291505056fea2646970667358221220e6761d9da1dc85bc88cdd8a8aab45f2bec01fd1ecb8ce68f7638d0a57c2f195764736f6c634300081c0033";

        vm.startBroadcast();

        address contractAddress;

        assembly {
            contractAddress := create(0, add(bytecode, 0x20), mload(bytecode))
        }

        console.log("L2 deployed at:", contractAddress);

        vm.stopBroadcast();
    }
}
